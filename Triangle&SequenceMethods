#triangle with star limit of 6 satrs
#Mehod 1
rows = 0                                              # Rows number
while  rows <= 5:                                     # while Rows is smaller or equal to 5 ( 0 to 5 = 6!! 0,1,2,3,4,5,6)
    for columns in range(0, rows + 1):                # for each rows that is going add a column
        print("*" , end = " " )                       # Print "*" character with (end parameter) which appends 
                                                      #space between characters instead of new line
    print("\n")                                        # adding new line
    rows = rows + 1                                    # adding rows
############################################################################################################################################################

#Triangle Method 2
for i in range(1,7):
    print(i*"*")
#################################################################################################################################################################

#Triangle Method 3
i = 1
while i <=6:
    print(i*"*")
    i += 1
#######################################################################################################################################################################

def input_data() -> list:
    info_type = []
    
    print('''**Choose your TRIANGLE Type :
    1- Input RT = Right-angled Triangle
    2- Input IT = Isosceles Triangle
    3- Input ET = Equilateral Triangle
    Note - You must write one of those
    ''')
    info_type.append(input("Please write your type of triangle? "))
    info_type.append(input("Please write your style for triangle? (Number(1-9) or ! @ # $ % ^ & *): "))
    return info_type

def input_validation(inp_d:list) -> list:
    
    #Input Type
    triangle_t = ["RT","Rt","rT","rt","IT","It","iT","it","ET","Et","eT","et"]
    #Input Style
    style_t = ["!","#","$","%","&","*","@","^","1","2","3","4","5","6","7","8","9"]
    
    if inp_d[0] in triangle_t: # condition on existance of triangle type 
        if inp_d[1] in style_t: 
            return [True,True]
        else:
            return [True,False]
        
    elif inp_d[1] in style_t: # condition on existance of triangle style 
        return [False,True]
    else:
        return [False,False]

def drow_triangle(inp_d:list):
    # Draw Right-angled Triangle
    if (inp_d[0] == "RT" or inp_d[0] == "Rt" or inp_d[0] == "rT" or inp_d[0] == "rt"): 

        print("===============================================")
        print("Result of Right-angled Triangle with %s style : "%(inp_d[1]))
        print("===Right-angled Triangle(1)===")
        print()
        
        counter = 1
        i = 0
        while i <= 6:  # رسم با حلقه ی while
            print((inp_d[1] + " ")*counter)
            counter = counter + 1
            i = i + 1
        print()
        print("===Right-angled Triangle(2)===")
        print()
        space = 10
        
        for row in range(0,6): # رسم با حلقه ی for
            for col in range(0,space):
                print(end=" ")
            for col in range(0,row + 1):
                print((inp_d[1] + " "),end = "")
            print()
            space = space -2
            
    # Draw Equilateral Triangle
    elif (inp_d[0] == "IT" or inp_d[0] == "It" or inp_d[0] == "iT" or inp_d[0] == "it"):

        print("===============================================")
        print("Result of Equilateral Triangle with %s style : "%(inp_d[1]))
        print("===Equilateral Triangle===") 
        print()
        
        space = 8
        for row in range(0,6):
            for col_space in range(0,space):
                print(end=" ")
            for col_star in range(0,row + 1):
                print((inp_d[1] + " "),end = "")
            print()
            print()
            space = space -1
    
    # Draw Isosceles Triangle
    elif (inp_d[0] == "ET" or inp_d[0] == "Et" or inp_d[0] == "eT" or inp_d[0] == "et"):
        print("===============================================")
        print("Result of Isosceles Triangle with %s style : "%(inp_d[1]))
        print("===Isosceles Triangle===") 
        print()
        
        rows = 5
        c = 0
        for row in range(1,rows + 1):
            for col in range(1,(rows - row) + 1):
                print(end = "  ")
            while c != (2 * row - 1):
                print((inp_d[1] + " "),end = "")
                c = c + 1
            c = 0
            print()
                
def error_type(inp_d:list,valid_bool:list):
    # Error Control
    if valid_bool[0] == False and valid_bool[1] == True:
        print("===============================================")
        print("*Your TYPE of TRIANGLE is wrong!!!\n**You must choose one of them:\n1- RT for Right-angled Triangle\nIT for Isosceles Triangle\n3- ET for Equilateral Triangle")
    
    elif valid_bool[0] == True and valid_bool[1] == False:
        print("===============================================")
        print("Your STYLE of TRIANGLE is wrong!!!\n\nYou must write one of them:\n  -Between: 1 to 9\n  -Between: ! @ # $ % ^ & * ")
    
    elif valid_bool[0] == False and valid_bool[1] == False:
        print("===============================================")
        print("All INPUT are wrong!!!\n\n1- For Type of TRIANGLE you must write:\n  -RT = Right-angled Triangle\n  -IT = Isosceles Triangle\n  -ET = Equilateral Triangle\n\n2- For style of TRIANGLE you can write:\n  -Between: 1 to 9\n  -Between: ! @ # $ % ^ & *")
    


triangle_type = input_data() # Getting Data
validation_bool = input_validation(triangle_type) # Checking types

if validation_bool[0] == True and validation_bool[1] == True: # if true
    
    drow_triangle(triangle_type)
    
elif validation_bool[0] == False or validation_bool[1] == False: # if false
    
    error_type(triangle_type,validation_bool)
#############################################################################################################################################################################

# This is with  (Comprehension Technique) 
# this def returns one of the specified shapes that user enters with how many rows should be and what the shaped is made by
# the specified shapes are right angle, triangle, square, diamond
def make_shape(char, rows, shape):
    result_list, char_len = [], (len(char) + 1)
    # the reason why I used len(char) + 1 is that if we entered letter with more than 1, it might make an incorrect shape (next line)
    # so, i used it to make it correct and flexible with any word and any length of words
    if shape == 0:
        result_list = [(("%s"%(char)) * (i + 1)) for i in range(rows)]
    elif shape == 1:
        result_list = [((" %s"%(char)) * (i + 1)).center(rows * char_len) for i in range(rows)]
    elif shape == 2:
        result_list = [(("  %s"%(char)) * (rows)) for i in range(rows)]
    elif shape == 3:
        rows //= 2
        x = [(" %s"%(char) * (i + 1)).center(rows * char_len) for i in range(rows)]
        y = [(" %s"%(char) * (i)).center(rows * char_len) for i in range(rows,0,-1)]
        result_list = x + y
    else:
        print("the item you just selected does not exist in the list")
    return result_list
try:
    shape_list = [f"{index + 1}.{i}" for index, i in enumerate(["Right angle", "Triangle", "Square", "Diamond"])]
    char = input("enter your character or word \n").strip()
    rows = int(input("enter the amount of rows \n"))
    print("List of shapes : ",*shape_list, sep="\n")
    shape = int(input("select one of the shapes above \n"))
except:
    print("something wrong for rows or shape input")
else:
    if len(char) == 0:
        print("characters or words are not found")
    else:
        print(*make_shape(char, rows, shape - 1),sep="\n")
######################################################################################################################################################################

#Get start stop stp points frm usr and show the results
#defining our function
def num_input ():
    
    try:
        # getting number of elements as input
        start = (int(input("Enter start point: ")))
        stop  = (int(input("Enter stop  point: ")))
        step  = (int(input("Enter step point: ")))
        
        #Printing start,stop,step numbers to user
        print (" -> start point is: " , start , end = "\n")
        print (" -> stop point is : " , stop , end = "\n")
        print (" -> step point is : " , step , end = "\n")
        
        #if user enters any number but positive numbers they'll get this message as output 
        if start > stop or step > stop:
            print("your entered value is out of range")

        else:

            # iterating till the range
            for each_num in range (start, stop+1 , step):
                    
                    print (each_num)
                    each_num = each_num + step
                
                
                    
                
   # if user enters any character but positive numbers they'll get this message as output                    
    except:
        print ("your entered value is ot valid")
        

num_input()
#########################################################################################################################################################################

#Methode 2
# creating an empty list
def list ():
    
    list = []
    try:

        # getting number of elements as input
        start = int(input("Enter start point : "))
        stop = int(input("Enter stop point : "))
        step = int(input("Enter step point : "))

        #if the value doesn't meet condition user will face "not in range" message
        if stop < start or stop < step:
            print(" not in range")

        else:

            # iterating till the range (stop point + 1 to show the end point itself too)
            for num in range(start, stop+1 , step):


                list.append(num) # adding numbers to the list
                num = num + step

            print(list)

    except: # for not entering valid input
        print("Enter valid Input!")
list()
######################################################################################################################################################################

#Method 3
from itertools import count

def input_sequence():
    title = ["START","STOP","STEP"]
    seq_list = []
    
    #Creating a list from user input ==============================================
    for seq in range(0,len(title)):
        seq_list.append(float(input("Please %s number for sequence: "%(title[seq]))))
    return seq_list
    #================================================================================
    
def re_range(seq_list):
    
    final = []
    d = 0
    i = seq_list[0]
    
    if seq_list[0] != 0 and seq_list[1] != 0 and seq_list[2] != 0:
        condition_1 = int(abs(((seq_list[0]) - (seq_list[1])) // (seq_list[2])))
    # Error conditions
    if seq_list[0] == 0 and seq_list[1] == 0 and seq_list[2] == 0:
        return [False,"all-zero"]
    if seq_list[0] == 0 and seq_list[1] == 0:
        return [False,"start-stop-zero"]
    if seq_list[2] == 0:
        return [False,"stepZero"]
    if condition_1 == 0:
        return [False,"stepIsBiggerThanRange"]  
    if (seq_list[0] < seq_list[1]) and (seq_list[2] <= 0) and (condition_1 != 0):  
        return [False,"start<stopAndStepIsNegative"]
    if (seq_list[0] > seq_list[1]) and (seq_list[2] >= 0) and (condition_1 != 0): 
         return [False,"start>stopAndStepIsPositive"]     
    #========================================================================================
    else:
    # if there's no error: ===================================================================
        for x in count(start = seq_list[0]):
            if d != condition_1:
                final.append(i)
                i = i + seq_list[2]
                d = d + 1
            elif d == condition_1 :
                break 
        return final
    #========================================================================================

def show_sequence(seqed_list,seq_list):
    correct_data_type= []
    final_stracture = []
    
    
    #Converting float to int => 12.0 , 12 ==============================
    for i  in seqed_list:
        if i == int(i):
            final_stracture.append(int(i))
        else:
            final_stracture.append(round(i,4))
    #========================================================================================       
    #checking int data type on printing =============
    for i in seq_list:
        if i == int(i):
            correct_data_type.append(int(i))
        else:
            correct_data_type.append(round(i,4))
    #========================================================================================
    
    #print
    print("======================================================")
    print()
    print("For the numerical range from %s to %s with step %s: "%(str(correct_data_type[0]),str(correct_data_type[1]),str(correct_data_type[2])))
    print()
    print(final_stracture)
    print()
    print("======================================================")            

def show_error(seqed_list):
    
    #error function
    if seqed_list[1] == "stepZero":
        print("=============================================================")
        print("The STEP must not be zero")
        print("=============================================================")
    elif seqed_list[1] == "start>stopAndStepIsPositive":
        print("=============================================================")
        print("When START is greater than STOP, the STEP must be negative.")
        print("=============================================================")
    elif seqed_list[1] == "start<stopAndStepIsNegative":
        print("=============================================================")
        print("When START is less than STOP, the STEP must be positive.")
        print("=============================================================")
    elif seqed_list[1] == "stepIsBiggerThanRange":
        print("=============================================================")
        print("The STEP is greater than the numerical range.")
        print("=============================================================")
    elif seqed_list[1] == "all-zero":
        print("=============================================================")
        print("START,STOP,STEP should not be ZERO!!!")
        print("=============================================================")
    elif seqed_list[1] == "start-stop-zero":
        print("=============================================================")
        print("START and STOP should not be ZERO!!!")
        print("=============================================================")
    else:
        print("=============================================================")
        print("Unknown error")
        print("=============================================================")
        
while True:

    try:
        #getting right list from def
        sequence_list = input_sequence()
        
        sequenced = re_range(sequence_list) 
        
        #if the list was sequenced:
        if sequenced[0] != False:
            show_sequence(sequenced,sequence_list)
        #if not:
        elif sequenced[0] == False:
            show_error(sequenced)
        break
        
    except ValueError: 
        
        print("===================================================")
        print("Oops! Please Enter VALID NUMBER!!!\nTry again...")
        print("===================================================")
###########################################################################################################################################################################

