{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89289781",
   "metadata": {},
   "outputs": [],
   "source": [
    "#triangle with star limit of 6 satrs\n",
    "#Mehod 1\n",
    "rows = 0                                              # Rows number\n",
    "while  rows <= 5:                                     # while Rows is smaller or equal to 5 ( 0 to 5 = 6!! 0,1,2,3,4,5,6)\n",
    "    for columns in range(0, rows + 1):                # for each rows that is going add a column\n",
    "        print(\"*\" , end = \" \" )                       # Print \"*\" character with (end parameter) which appends \n",
    "                                                      #space between characters instead of new line\n",
    "    print(\"\\n\")                                        # adding new line\n",
    "    rows = rows + 1                                    # adding rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96d8e23b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Triangle Method 2\n",
    "for i in range(1,7):\n",
    "    print(i*\"*\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b5cee5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Triangle Method 3\n",
    "i = 1\n",
    "while i <=6:\n",
    "    print(i*\"*\")\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3630d0b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def input_data() -> list:\n",
    "    info_type = []\n",
    "    \n",
    "    print('''**Choose your TRIANGLE Type :\n",
    "    1- Input RT = Right-angled Triangle\n",
    "    2- Input IT = Isosceles Triangle\n",
    "    3- Input ET = Equilateral Triangle\n",
    "    Note - You must write one of those\n",
    "    ''')\n",
    "    info_type.append(input(\"Please write your type of triangle? \"))\n",
    "    info_type.append(input(\"Please write your style for triangle? (Number(1-9) or ! @ # $ % ^ & *): \"))\n",
    "    return info_type\n",
    "\n",
    "def input_validation(inp_d:list) -> list:\n",
    "    \n",
    "    #Input Type\n",
    "    triangle_t = [\"RT\",\"Rt\",\"rT\",\"rt\",\"IT\",\"It\",\"iT\",\"it\",\"ET\",\"Et\",\"eT\",\"et\"]\n",
    "    #Input Style\n",
    "    style_t = [\"!\",\"#\",\"$\",\"%\",\"&\",\"*\",\"@\",\"^\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n",
    "    \n",
    "    if inp_d[0] in triangle_t: # condition on existance of triangle type \n",
    "        if inp_d[1] in style_t: \n",
    "            return [True,True]\n",
    "        else:\n",
    "            return [True,False]\n",
    "        \n",
    "    elif inp_d[1] in style_t: # condition on existance of triangle style \n",
    "        return [False,True]\n",
    "    else:\n",
    "        return [False,False]\n",
    "\n",
    "def drow_triangle(inp_d:list):\n",
    "    # Draw Right-angled Triangle\n",
    "    if (inp_d[0] == \"RT\" or inp_d[0] == \"Rt\" or inp_d[0] == \"rT\" or inp_d[0] == \"rt\"): \n",
    "\n",
    "        print(\"===============================================\")\n",
    "        print(\"Result of Right-angled Triangle with %s style : \"%(inp_d[1]))\n",
    "        print(\"===Right-angled Triangle(1)===\")\n",
    "        print()\n",
    "        \n",
    "        counter = 1\n",
    "        i = 0\n",
    "        while i <= 6:  # رسم با حلقه ی while\n",
    "            print((inp_d[1] + \" \")*counter)\n",
    "            counter = counter + 1\n",
    "            i = i + 1\n",
    "        print()\n",
    "        print(\"===Right-angled Triangle(2)===\")\n",
    "        print()\n",
    "        space = 10\n",
    "        \n",
    "        for row in range(0,6): # رسم با حلقه ی for\n",
    "            for col in range(0,space):\n",
    "                print(end=\" \")\n",
    "            for col in range(0,row + 1):\n",
    "                print((inp_d[1] + \" \"),end = \"\")\n",
    "            print()\n",
    "            space = space -2\n",
    "            \n",
    "    # Draw Equilateral Triangle\n",
    "    elif (inp_d[0] == \"IT\" or inp_d[0] == \"It\" or inp_d[0] == \"iT\" or inp_d[0] == \"it\"):\n",
    "\n",
    "        print(\"===============================================\")\n",
    "        print(\"Result of Equilateral Triangle with %s style : \"%(inp_d[1]))\n",
    "        print(\"===Equilateral Triangle===\") \n",
    "        print()\n",
    "        \n",
    "        space = 8\n",
    "        for row in range(0,6):\n",
    "            for col_space in range(0,space):\n",
    "                print(end=\" \")\n",
    "            for col_star in range(0,row + 1):\n",
    "                print((inp_d[1] + \" \"),end = \"\")\n",
    "            print()\n",
    "            print()\n",
    "            space = space -1\n",
    "    \n",
    "    # Draw Isosceles Triangle\n",
    "    elif (inp_d[0] == \"ET\" or inp_d[0] == \"Et\" or inp_d[0] == \"eT\" or inp_d[0] == \"et\"):\n",
    "        print(\"===============================================\")\n",
    "        print(\"Result of Isosceles Triangle with %s style : \"%(inp_d[1]))\n",
    "        print(\"===Isosceles Triangle===\") \n",
    "        print()\n",
    "        \n",
    "        rows = 5\n",
    "        c = 0\n",
    "        for row in range(1,rows + 1):\n",
    "            for col in range(1,(rows - row) + 1):\n",
    "                print(end = \"  \")\n",
    "            while c != (2 * row - 1):\n",
    "                print((inp_d[1] + \" \"),end = \"\")\n",
    "                c = c + 1\n",
    "            c = 0\n",
    "            print()\n",
    "                \n",
    "def error_type(inp_d:list,valid_bool:list):\n",
    "    # Error Control\n",
    "    if valid_bool[0] == False and valid_bool[1] == True:\n",
    "        print(\"===============================================\")\n",
    "        print(\"*Your TYPE of TRIANGLE is wrong!!!\\n**You must choose one of them:\\n1- RT for Right-angled Triangle\\nIT for Isosceles Triangle\\n3- ET for Equilateral Triangle\")\n",
    "    \n",
    "    elif valid_bool[0] == True and valid_bool[1] == False:\n",
    "        print(\"===============================================\")\n",
    "        print(\"Your STYLE of TRIANGLE is wrong!!!\\n\\nYou must write one of them:\\n  -Between: 1 to 9\\n  -Between: ! @ # $ % ^ & * \")\n",
    "    \n",
    "    elif valid_bool[0] == False and valid_bool[1] == False:\n",
    "        print(\"===============================================\")\n",
    "        print(\"All INPUT are wrong!!!\\n\\n1- For Type of TRIANGLE you must write:\\n  -RT = Right-angled Triangle\\n  -IT = Isosceles Triangle\\n  -ET = Equilateral Triangle\\n\\n2- For style of TRIANGLE you can write:\\n  -Between: 1 to 9\\n  -Between: ! @ # $ % ^ & *\")\n",
    "    \n",
    "\n",
    "\n",
    "triangle_type = input_data() # Getting Data\n",
    "validation_bool = input_validation(triangle_type) # Checking types\n",
    "\n",
    "if validation_bool[0] == True and validation_bool[1] == True: # if true\n",
    "    \n",
    "    drow_triangle(triangle_type)\n",
    "    \n",
    "elif validation_bool[0] == False or validation_bool[1] == False: # if false\n",
    "    \n",
    "    error_type(triangle_type,validation_bool)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "445e2377",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is with  (Comprehension Technique) \n",
    "# this def returns one of the specified shapes that user enters with how many rows should be and what the shaped is made by\n",
    "# the specified shapes are right angle, triangle, square, diamond\n",
    "def make_shape(char, rows, shape):\n",
    "    result_list, char_len = [], (len(char) + 1)\n",
    "    # the reason why I used len(char) + 1 is that if we entered letter with more than 1, it might make an incorrect shape (next line)\n",
    "    # so, i used it to make it correct and flexible with any word and any length of words\n",
    "    if shape == 0:\n",
    "        result_list = [((\"%s\"%(char)) * (i + 1)) for i in range(rows)]\n",
    "    elif shape == 1:\n",
    "        result_list = [((\" %s\"%(char)) * (i + 1)).center(rows * char_len) for i in range(rows)]\n",
    "    elif shape == 2:\n",
    "        result_list = [((\"  %s\"%(char)) * (rows)) for i in range(rows)]\n",
    "    elif shape == 3:\n",
    "        rows //= 2\n",
    "        x = [(\" %s\"%(char) * (i + 1)).center(rows * char_len) for i in range(rows)]\n",
    "        y = [(\" %s\"%(char) * (i)).center(rows * char_len) for i in range(rows,0,-1)]\n",
    "        result_list = x + y\n",
    "    else:\n",
    "        print(\"the item you just selected does not exist in the list\")\n",
    "    return result_list\n",
    "try:\n",
    "    shape_list = [f\"{index + 1}.{i}\" for index, i in enumerate([\"Right angle\", \"Triangle\", \"Square\", \"Diamond\"])]\n",
    "    char = input(\"enter your character or word \\n\").strip()\n",
    "    rows = int(input(\"enter the amount of rows \\n\"))\n",
    "    print(\"List of shapes : \",*shape_list, sep=\"\\n\")\n",
    "    shape = int(input(\"select one of the shapes above \\n\"))\n",
    "except:\n",
    "    print(\"something wrong for rows or shape input\")\n",
    "else:\n",
    "    if len(char) == 0:\n",
    "        print(\"characters or words are not found\")\n",
    "    else:\n",
    "        print(*make_shape(char, rows, shape - 1),sep=\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db61c72b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#Get start stop stp points frm usr and show the results\n",
    "#defining our function\n",
    "def num_input ():\n",
    "    \n",
    "    try:\n",
    "        # getting number of elements as input\n",
    "        start = (int(input(\"Enter start point: \")))\n",
    "        stop  = (int(input(\"Enter stop  point: \")))\n",
    "        step  = (int(input(\"Enter step point: \")))\n",
    "        \n",
    "        #Printing start,stop,step numbers to user\n",
    "        print (\" -> start point is: \" , start , end = \"\\n\")\n",
    "        print (\" -> stop point is : \" , stop , end = \"\\n\")\n",
    "        print (\" -> step point is : \" , step , end = \"\\n\")\n",
    "        \n",
    "        #if user enters any number but positive numbers they'll get this message as output \n",
    "        if start > stop or step > stop:\n",
    "            print(\"your entered value is out of range\")\n",
    "\n",
    "        else:\n",
    "\n",
    "            # iterating till the range\n",
    "            for each_num in range (start, stop+1 , step):\n",
    "                    \n",
    "                    print (each_num)\n",
    "                    each_num = each_num + step\n",
    "                \n",
    "                \n",
    "                    \n",
    "                \n",
    "   # if user enters any character but positive numbers they'll get this message as output                    \n",
    "    except:\n",
    "        print (\"your entered value is ot valid\")\n",
    "        \n",
    "\n",
    "num_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86292c9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Methode 2\n",
    "# creating an empty list\n",
    "def list ():\n",
    "    \n",
    "    list = []\n",
    "    try:\n",
    "\n",
    "        # getting number of elements as input\n",
    "        start = int(input(\"Enter start point : \"))\n",
    "        stop = int(input(\"Enter stop point : \"))\n",
    "        step = int(input(\"Enter step point : \"))\n",
    "\n",
    "        #if the value doesn't meet condition user will face \"not in range\" message\n",
    "        if stop < start or stop < step:\n",
    "            print(\" not in range\")\n",
    "\n",
    "        else:\n",
    "\n",
    "            # iterating till the range (stop point + 1 to show the end point itself too)\n",
    "            for num in range(start, stop+1 , step):\n",
    "\n",
    "\n",
    "                list.append(num) # adding numbers to the list\n",
    "                num = num + step\n",
    "\n",
    "            print(list)\n",
    "\n",
    "    except: # for not entering valid input\n",
    "        print(\"Enter valid Input!\")\n",
    "list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f0a38d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Method 3\n",
    "from itertools import count\n",
    "\n",
    "def input_sequence():\n",
    "    title = [\"START\",\"STOP\",\"STEP\"]\n",
    "    seq_list = []\n",
    "    \n",
    "    #Creating a list from user input ==============================================\n",
    "    for seq in range(0,len(title)):\n",
    "        seq_list.append(float(input(\"Please %s number for sequence: \"%(title[seq]))))\n",
    "    return seq_list\n",
    "    #================================================================================\n",
    "    \n",
    "def re_range(seq_list):\n",
    "    \n",
    "    final = []\n",
    "    d = 0\n",
    "    i = seq_list[0]\n",
    "    \n",
    "    if seq_list[0] != 0 and seq_list[1] != 0 and seq_list[2] != 0:\n",
    "        condition_1 = int(abs(((seq_list[0]) - (seq_list[1])) // (seq_list[2])))\n",
    "    # Error conditions\n",
    "    if seq_list[0] == 0 and seq_list[1] == 0 and seq_list[2] == 0:\n",
    "        return [False,\"all-zero\"]\n",
    "    if seq_list[0] == 0 and seq_list[1] == 0:\n",
    "        return [False,\"start-stop-zero\"]\n",
    "    if seq_list[2] == 0:\n",
    "        return [False,\"stepZero\"]\n",
    "    if condition_1 == 0:\n",
    "        return [False,\"stepIsBiggerThanRange\"]  \n",
    "    if (seq_list[0] < seq_list[1]) and (seq_list[2] <= 0) and (condition_1 != 0):  \n",
    "        return [False,\"start<stopAndStepIsNegative\"]\n",
    "    if (seq_list[0] > seq_list[1]) and (seq_list[2] >= 0) and (condition_1 != 0): \n",
    "         return [False,\"start>stopAndStepIsPositive\"]     \n",
    "    #========================================================================================\n",
    "    else:\n",
    "    # if there's no error: ===================================================================\n",
    "        for x in count(start = seq_list[0]):\n",
    "            if d != condition_1:\n",
    "                final.append(i)\n",
    "                i = i + seq_list[2]\n",
    "                d = d + 1\n",
    "            elif d == condition_1 :\n",
    "                break \n",
    "        return final\n",
    "    #========================================================================================\n",
    "\n",
    "def show_sequence(seqed_list,seq_list):\n",
    "    correct_data_type= []\n",
    "    final_stracture = []\n",
    "    \n",
    "    \n",
    "    #Converting float to int => 12.0 , 12 ==============================\n",
    "    for i  in seqed_list:\n",
    "        if i == int(i):\n",
    "            final_stracture.append(int(i))\n",
    "        else:\n",
    "            final_stracture.append(round(i,4))\n",
    "    #========================================================================================       \n",
    "    #checking int data type on printing =============\n",
    "    for i in seq_list:\n",
    "        if i == int(i):\n",
    "            correct_data_type.append(int(i))\n",
    "        else:\n",
    "            correct_data_type.append(round(i,4))\n",
    "    #========================================================================================\n",
    "    \n",
    "    #print\n",
    "    print(\"======================================================\")\n",
    "    print()\n",
    "    print(\"For the numerical range from %s to %s with step %s: \"%(str(correct_data_type[0]),str(correct_data_type[1]),str(correct_data_type[2])))\n",
    "    print()\n",
    "    print(final_stracture)\n",
    "    print()\n",
    "    print(\"======================================================\")            \n",
    "\n",
    "def show_error(seqed_list):\n",
    "    \n",
    "    #error function\n",
    "    if seqed_list[1] == \"stepZero\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"The STEP must not be zero\")\n",
    "        print(\"=============================================================\")\n",
    "    elif seqed_list[1] == \"start>stopAndStepIsPositive\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"When START is greater than STOP, the STEP must be negative.\")\n",
    "        print(\"=============================================================\")\n",
    "    elif seqed_list[1] == \"start<stopAndStepIsNegative\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"When START is less than STOP, the STEP must be positive.\")\n",
    "        print(\"=============================================================\")\n",
    "    elif seqed_list[1] == \"stepIsBiggerThanRange\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"The STEP is greater than the numerical range.\")\n",
    "        print(\"=============================================================\")\n",
    "    elif seqed_list[1] == \"all-zero\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"START,STOP,STEP should not be ZERO!!!\")\n",
    "        print(\"=============================================================\")\n",
    "    elif seqed_list[1] == \"start-stop-zero\":\n",
    "        print(\"=============================================================\")\n",
    "        print(\"START and STOP should not be ZERO!!!\")\n",
    "        print(\"=============================================================\")\n",
    "    else:\n",
    "        print(\"=============================================================\")\n",
    "        print(\"Unknown error\")\n",
    "        print(\"=============================================================\")\n",
    "        \n",
    "while True:\n",
    "\n",
    "    try:\n",
    "        #getting right list from def\n",
    "        sequence_list = input_sequence()\n",
    "        \n",
    "        sequenced = re_range(sequence_list) \n",
    "        \n",
    "        #if the list was sequenced:\n",
    "        if sequenced[0] != False:\n",
    "            show_sequence(sequenced,sequence_list)\n",
    "        #if not:\n",
    "        elif sequenced[0] == False:\n",
    "            show_error(sequenced)\n",
    "        break\n",
    "        \n",
    "    except ValueError: \n",
    "        \n",
    "        print(\"===================================================\")\n",
    "        print(\"Oops! Please Enter VALID NUMBER!!!\\nTry again...\")\n",
    "        print(\"===================================================\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da505c65",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
